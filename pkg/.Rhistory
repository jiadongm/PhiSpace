scale_y_continuous(name = NULL, labels = NULL)
} else {
p <-
scores %>%
ggplot(aes(x = !! sym(var1), y = !! sym(var2))) +
geom_point(aes(colour = !! sym(groupKey)), size = pointSize, stroke = 0) +
theme(
legend.position = "none",
axis.ticks = element_blank()
) +
scale_x_continuous(name = NULL, labels = NULL) +
scale_y_continuous(name = NULL, labels = NULL)
if(!is.null(manualCol)){
p <- p + scale_color_manual(values = manualCol)
}
}
p <- p + theme_bw(base_size = fsize)
out_nondiag[[comb]] <- p
}
# Arrange plots
out <- c(out_nondiag, out_diag)
if(!is.null(groupKey)){
out[[length(out) + 1]] <- p_legend
}
layoutM <- matrix(NA, length(comp_idx), length(comp_idx))
layoutM[upper.tri(layoutM, diag = F)] <- 1:nrow(combs)
diag(layoutM) <- (nrow(combs)+1):(nrow(combs)+length(comp_idx))
if(!is.null(groupKey)) layoutM[ceiling(length(comp_idx)/2)-1, ceiling(length(comp_idx)/2)+1] <- length(out)
p <- gridExtra::grid.arrange(grobs = out, layout_matrix = layoutM)
p <- gridExtra::grid.arrange(grobs = out, layout_matrix = layoutM)
layoutM
# Arrange plots
out <- c(out_nondiag, out_diag)
if(!is.null(groupKey)){
out[[length(out) + 1]] <- p_legend
}
out
layoutM <- matrix(NA, length(comp_idx), length(comp_idx))
layoutM[upper.tri(layoutM, diag = F)] <- 1:nrow(combs)
diag(layoutM) <- (nrow(combs)+1):(nrow(combs)+length(comp_idx))
if(!is.null(groupKey)) layoutM[ceiling(length(comp_idx)/2)-1, ceiling(length(comp_idx)/2)+1] <- length(out)
layout()
layoutM
1:nrow(combs)
layoutM[upper.tri(layoutM, diag = F)]
layoutM <- matrix(NA, length(comp_idx), length(comp_idx))
layoutM
upper.tri(layoutM, diag = F)
1:nrow(combs)
layoutM[upper.tri(layoutM, diag = F)] <- 1:nrow(combs)
layoutM
length(out)
ceiling(length(comp_idx)/2)-1
ceiling(length(comp_idx)/2)+1
if(!is.null(groupKey)) layoutM[ceiling(length(comp_idx)/2)+1, ceiling(length(comp_idx)/2)-1] <- length(out)
p <- gridExtra::grid.arrange(grobs = out, layout_matrix = layoutM)
layoutM
# Arrange plots
out <- c(out_nondiag, out_diag)
if(!is.null(groupKey)){
out[[length(out) + 1]] <- p_legend
}
layoutM <- matrix(NA, length(comp_idx), length(comp_idx))
layoutM[upper.tri(layoutM, diag = F)] <- 1:nrow(combs)
diag(layoutM) <- (nrow(combs)+1):(nrow(combs)+length(comp_idx))
if(!is.null(groupKey)) layoutM[ceiling(length(comp_idx)/2)+1, ceiling(length(comp_idx)/2)-1] <- length(out)
p <- gridExtra::grid.arrange(grobs = out, layout_matrix = layoutM)
document()
matrixPlot(pcRes$scores %>% as.data.frame() %>% mutate(lab = iris$Species), comp_idx = 1:3, groupKey = "lab")
document()
matrixPlot(pcRes$scores %>% as.data.frame() %>% mutate(lab = iris$Species), comp_idx = 1:3, groupKey = "lab")
document()
matrixPlot(pcRes$scores %>% as.data.frame() %>% mutate(lab = iris$Species), comp_idx = 1:3, groupKey = "lab")
document()
matrixPlot(pcRes$scores %>% as.data.frame() %>% mutate(lab = iris$Species), comp_idx = 1:3, groupKey = "lab")
library(devtools)
document()
document()
query <- readRDS("~/Dropbox/Research_projects/PhiSpace/sce.rds")
query
VizSpatial(query)
document
document()
VizSpatial(query)
query$x
VizSpatial(query, groupBy = "nCount_Spatial")
query <- readRDS("~/Dropbox/Research_projects/PhiSpace/sampleVisium.rds")
VizSpatial(query, groupBy = "nCount_Spatial")
document()
VizSpatial(query, groupBy = "nCount_Spatial")
reducedDims(query)
reducedDim(query, "PCA") <- getPC(t(assay(query, "log1p")), ncomp = 2)
reducedDim(query, "PCA") <- getPC(t(assay(query, "log1p")), ncomp = 2)$scores
VizSpatial(query, groupBy = "nCount_Spatial")
assay(query, "counts")
VizSpatial(query, feature = "KRT17")
VizSpatial(query, feature = "KRT15")
VizSpatial(query, feature = "KRT5")
document()
VizSpatial(query, feature = "KRT5")
"KRT5" %in% rownames(query)
document()
VizSpatial(query, feature = "KRT5")
sce <- query
plot_dat <- colData(sce) %>% as.data.frame()
feature = "KRT5"
if(!(feature %in% rownames(sce))) stop("Feature not in sce object.")
plot_dat[[feature]] <- as.numeric(assay(sce, assay2use)[feature, ])
document()
VizSpatial(query, feature = "KRT5")
VizSpatial(query, feature = "KRT17")
VizSpatial(query, feature = "KRT19")
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA")
reducedDims(query)
reducedDims(query) |> names()
reducedDimNames(sce)
document()
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA")
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PC")
check()
?arrange
arrange
?arrange
document()
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA", censor = T)
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = T)
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = T, ptSize = 5)
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = F, ptSize = 5)
document()
check()
document()
?clue::solve_LSAP
document()
sample(1:2, 30)
sample(1:2, 30, replace = T)
document()
library(devtools)
document()
document()
?slice_head
document()
check()
Loadings <- data.frame(
comp1 = rnorm(30)
)
rownames(Loadings) <- paste0("feat", 1:30)
loadBarplot(Loadings, nfeat = 10)
document()
Loadings <- data.frame(
comp1 = rnorm(30)
)
rownames(Loadings) <- paste0("feat", 1:30)
loadBarplot(Loadings, nfeat = 10)
document()
# library(tidyverse)
library(devtools)
document()
foo <- list(0, c(1,2))
names(foo)
?warning
?normPhiScore
?normPhiScores
document()
check()
?desc
document()
use_version()
use_version()
use_version()
# library(tidyverse)
library(devtools)
document()
document()
query <- readRDS("~/Dropbox/Research_projects/PhiSpace/sampleVisium.rds")
reducedDim(query, "PCA") <- getPC(t(assay(query, "log1p")), ncomp = 2)$scores
matrixPlot(reducedDim(query,"PCA"), comp_idx = 1:4, colBy = query$nCount_Spatial)
reducedDim(query, "PCA") <- getPC(t(assay(query, "log1p")), ncomp = 5)$scores
matrixPlot(reducedDim(query,"PCA"), comp_idx = 1:4, colBy = query$nCount_Spatial)
document()
load_all()
matrixPlot(reducedDim(query,"PCA"), comp_idx = 1:4, colBy = query$nCount_Spatial)
utils::combn(1:4, 2) %>% t()
GGapply::ggpairs
install.packages("GGally")
?GGally::ggpairs
GGally::ggpairs(reducedDim(query,"PCA"), columns = c("comp1", "comp2", "comp3"), mapping = aes(colour = query$nCount_Spatial))
GGally::ggpairs(reducedDim(query,"PCA"), columns = c("comp1", "comp2", "comp3"))
GGally::ggpairs
?GGally::ggmatrix
document()
out <- matrixPlot(reducedDim(query,"PCA"), comp_idx = 1:4, colBy = query$nCount_Spatial, returnPlotList = T)
out
plotList <- out$plotList[1:9]
GGally::ggmatrix(plotList)
GGally::ggmatrix(plotList, nrow = 3)
GGally::ggmatrix(plotList, nrow = 3, ncol = 3)
out$plotList
plotList <- out$plotList
GGally::ggmatrix(plotList, nrow = 3, ncol = 3)
GGally::ggmatrix(plotList, nrow = 4, ncol = 4)
GGally::ggmatrix(plotList, nrow = 4, ncol = 4, byrow = F)
GGally::ggpairs
utils::combn(1:4, 2) %>% t()
document()
out <- matrixPlot(reducedDim(query,"PCA"), comp_idx = 1:4, colBy = query$nCount_Spatial, returnPlotList = T)
scores <- reducedDim(query,"PCA")
comp_idx = 1:4
colBy = query$nCount_Spatial
max_ncomp = NULL
pointAlpha = NULL
pointSize = 1
manualCol = NULL
manualAlpha = NULL
fsize = 14
if(is.null(max_ncomp) & is.null(comp_idx)){
stop("Need to specify either max_ncomp or comp_idx.")
}
if(!is.null(max_ncomp)) comp_idx <- 1:max_ncomp
if(!all(paste0("comp", comp_idx) %in% colnames(scores))){
missingComps <-
paste0("comp", comp_idx)[!(paste0("comp", comp_idx) %in% colnames(scores))]
stop(paste0("These components are missing from scores: ", missingComps))
}
Ngroups <- length(unique(colBy))
# Density plots on diagonal
out_diag <- vector("list", length(comp_idx))
for(comp_i in 1:length(comp_idx)){
var2plot <- paste0("comp", comp_idx[comp_i])
p <- scores %>%
ggplot(aes(x = !!sym(var2plot))) +
geom_density(bw = "sj") +
theme_bw(base_size = fsize) +
theme(
legend.position = "none",
axis.title.y = element_blank()
)
if(is.null(colBy)){
p <- p +
geom_jitter(aes(y = 0), height = diff(layer_scales(p)$y$range$range)/20, size = pointSize, stroke = 0)
out_diag[[comp_i]] <- p
} else {
p <- p +
geom_jitter(aes(y = 0, colour = colBy),
height = diff(layer_scales(p)$y$range$range)/20)
if(!is.null(manualCol)){
p <- p + scale_color_manual(values = manualCol)
} else {
if(is.numeric(colBy)) p <- p + scale_colour_gradientn(colours = MATLAB_cols)
}
out_diag[[comp_i]] <- p
}
}
# Get the legend
if(!is.null(colBy)) suppressWarnings(p_legend <- cowplot::get_legend(p))
p_legend
p
p +theme(legend.position = "right")
p_legend <- cowplot::get_legend(p)
p_legend
# Get the legend
if(!is.null(colBy)) suppressWarnings(p_legend <- cowplot::get_legend(p +theme(legend.position = "right")))
p_legend
# Scatter plots on non-diagonal
combs <- utils::combn(comp_idx, 2) %>% t()
out_nondiag <- vector("list", nrow(combs))
for(comb in 1:nrow(combs)){
var1 <- paste0("comp", combs[comb, 1])
var2 <- paste0("comp", combs[comb, 2])
if(is.null(colBy)){
p <- scores %>%
ggplot(aes(x = !! sym(var1), y = !! sym(var2))) +
geom_point(size = pointSize, stroke = 0) +
theme_bw(base_size = fsize) +
theme(
legend.position = "none",
axis.ticks = element_blank()
) +
scale_x_continuous(name = NULL, labels = NULL) +
scale_y_continuous(name = NULL, labels = NULL)
} else {
p <-
scores %>%
ggplot(aes(x = !! sym(var1), y = !! sym(var2))) +
geom_point(aes(colour = colBy), size = pointSize, stroke = 0) +
theme_bw(base_size = fsize) +
theme(
legend.position = "none",
axis.ticks = element_blank()
) +
scale_x_continuous(name = NULL, labels = NULL) +
scale_y_continuous(name = NULL, labels = NULL)
if(!is.null(manualCol)){
p <- p + scale_color_manual(values = manualCol)
} else {
if(is.numeric(colBy)) p <- p + scale_colour_gradientn(colours = MATLAB_cols)
}
}
out_nondiag[[comb]] <- p
}
# Arrange plots
out <- c(out_nondiag, out_diag)
# Arrange diagonal
diagIdx <- 1
toAdd <- length(comp_idx)
for(kk in 1:length(comp_idx)){
out[[diagIdx]] <- out_diag[[kk]]
diagIdx <- diagIdx + toAdd
toAdd <- toAdd - 1
}
# Non-diagonal, arrange column by column
startIdxMat <- 2
toAdd <- length(comp_idx) - 2
startIdxNondiag <- 1
for(kk in 1:(length(comp_idx)-1)){
endIdxMat <- startIdxMat + toAdd
endIdxNondiag <- startIdxNondiag + toAdd
out[[startIdxMat:endIdxMat]] <- out_nondiag[[startIdxNondiag:endIdxNondiag]]
startIdxMat <- endIdxMat + 2
startIdxNondiag <- endIdxNondiag + 1
toAdd <- toAdd - 1
}
kk
# Non-diagonal, arrange column by column
startIdxMat <- 2
toAdd <- length(comp_idx) - 2
startIdxNondiag <- 1
endIdxMat <- startIdxMat + toAdd
endIdxNondiag <- startIdxNondiag + toAdd
startIdxNondiag
endIdxNondiag
out_nondiag
out_nondiag[[startIdxNondiag:endIdxNondiag]]
# Non-diagonal, arrange column by column
startIdxMat <- 2
toAdd <- length(comp_idx) - 2
startIdxNondiag <- 1
for(kk in 1:(length(comp_idx)-1)){
endIdxMat <- startIdxMat + toAdd
endIdxNondiag <- startIdxNondiag + toAdd
out[startIdxMat:endIdxMat] <- out_nondiag[startIdxNondiag:endIdxNondiag]
startIdxMat <- endIdxMat + 2
startIdxNondiag <- endIdxNondiag + 1
toAdd <- toAdd - 1
}
layoutM <- matrix(NA, length(comp_idx), length(comp_idx))
layoutM[lower.tri(layoutM, diag = T)] <- 1:length(out)
# diag(layoutM) <- (nrow(combs)+1):(nrow(combs)+length(comp_idx))
if(!is.null(colBy)){
out[[length(out) + 1]] <- p_legend
layoutM[1, length(comp_idx)] <- length(out)
}
p <- gridExtra::grid.arrange(grobs = out, layout_matrix = layoutM)
document()
PhiRes$PhiSpaceScore
# library(tidyverse)
library(devtools)
document()
query <- readRDS("~/Dropbox/Research_projects/PhiSpace/sampleVisium.rds")
reducedDim(query, "PCA") <- getPC(t(assay(query, "log1p")), ncomp = 5)$scores
out <- matrixPlot(reducedDim(query,"PCA"), comp_idx = 1:4, colBy = query$nCount_Spatial, returnPlotList = T)
plotList <- out$plotList
GGally::ggmatrix(plotList, nrow = 4, ncol = 4, byrow = F)
plotList <- out$plotList
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = T, ptSize = 5)
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = T, ptSize = 2)
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = T, ptSize = 3)
Loadings <- data.frame(
comp1 = rnorm(30)
)
rownames(Loadings) <- paste0("feat", 1:30)
loadBarplot(Loadings, nfeat = 10)
library(qs)
reference <- qread("~/Dropbox/Research_projects/PhiSpace/PhiSpaceST_pkg/data/AzimuthLung2.0_sce_0.1sub.qs")
reference
table(reference$cell_type)
refName <- "cell_type"
reference <- subsample(reference, key = refName)
gc()
query <- readRDS("~/Dropbox/Research_projects/PhiSpace/sampleVisium.rds")
reducedDim(query, "PCA") <- getPC(t(assay(query, "log1p")), ncomp = 5)$scores
library(SpatialExperiment)
query
query <- SpatialExperiment(
list(counts = assay(query, "counts"), log1p = assay(query, "log1p")),
spatialCoords = colData(query)[,c("x","y")]
)
query <- SpatialExperiment(
list(counts = assay(query, "counts"), log1p = assay(query, "log1p")),
spatialCoords = colData(query)[,c("x","y")] %>% as.matrix()
)
query
reducedDim(query, "PCA") <- getPC(t(assay(query, "log1p")), ncomp = 5)$scores
out <- matrixPlot(reducedDim(query,"PCA"), comp_idx = 1:4, colBy = query$nCount_Spatial, returnPlotList = T)
query <- readRDS("~/Dropbox/Research_projects/PhiSpace/sampleVisium.rds")
query <- SpatialExperiment(
list(counts = assay(query, "counts"), log1p = assay(query, "log1p")),
spatialCoords = colData(query)[,c("x","y")] %>% as.matrix(), colData = colData(query)
)
reducedDim(query, "PCA") <- getPC(t(assay(query, "log1p")), ncomp = 5)$scores
out <- matrixPlot(reducedDim(query,"PCA"), comp_idx = 1:4, colBy = query$nCount_Spatial, returnPlotList = T)
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = T, ptSize = 3)
type(query)
class(query)
class(query) == "SpatialExperiment"
class(reference)
spatialCoords(query)
spatialCoordsNames(query)
use_package("SpatialExperiment")
document()
foo <- c("x", "dd")
c("x", "y") %in% foo
obj <- query
coordNames <- spatialCoordsNames(obj)
plot_dat <- colData(obj) %>% as.data.frame()
any(coordNames %in% colnames(colData(obj)))
which(coordNames %in% colnames(colData(obj)))
foo <- data.frame(x=c(0,1), y = c(0,1), z = c(0,1))
foo
foo[,c("x", "y")] <- NULL
foo
coordNames <- spatialCoordsNames(obj)
plot_dat <- colData(obj) %>% as.data.frame()
coordNames <- spatialCoordsNames(obj)
plot_dat <- colData(obj) %>% as.data.frame()
plot_dat
coordNames <- spatialCoordsNames(obj)
plot_dat <- colData(obj) %>% as.data.frame()
if(any(coordNames %in% colnames(colData(obj)))){
# If coordNames already present in colData(obj), then delete those columns from colData
plot_dat[,coordNames[which(coordNames %in% colnames(colData(obj)))]] <- NULL
}
plot_dat <- cbind(plot_dat, spatialCoords(obj))
plot_dat
foo <- matrix(c(1,2,3,4), 2)
foo
colnames(foo)
!all(coordNames %in% colnames(colData(obj)))
document()
check()
query
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = T, ptSize = 3)
document()
check()
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = T, ptSize = 3)
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = T, ptSize = 3, legend.title = "PC1")
# library(tidyverse)
library(devtools)
library(qs)
document()
document()
check()
document()
check()
document()
Loadings <- data.frame(
comp1 = rnorm(30)
)
rownames(Loadings) <- paste0("feat", 1:30)
loadBarplot(Loadings, nfeat = 10)
# PhiSpace
query <- PhiSpace(
reference = reference, query = query, phenotypes = refName, PhiSpaceAssay = "log1p", regMethod = "PLS"
)
library(devtools)
library(qs)
document()
reference <- qread("~/Dropbox/Research_projects/PhiSpace/PhiSpaceST_pkg/data/AzimuthLung2.0_sce_0.1sub.qs")
refName <- "cell_type"
reference <- subsample(reference, key = refName)
gc()
query <- readRDS("~/Dropbox/Research_projects/PhiSpace/sampleVisium.rds")
query <- SpatialExperiment(
list(counts = assay(query, "counts"), log1p = assay(query, "log1p")),
spatialCoords = colData(query)[,c("x","y")] %>% as.matrix(), colData = colData(query)
)
reducedDim(query, "PCA") <- getPC(t(assay(query, "log1p")), ncomp = 5)$scores
out <- matrixPlot(reducedDim(query,"PCA"), comp_idx = 1:4, colBy = query$nCount_Spatial, returnPlotList = T)
VizSpatial(query, reducedDim = "comp1", reducedDim2use = "PCA",reOrder = T, ptSize = 3, legend.title = "PC1")
Loadings <- data.frame(
comp1 = rnorm(30)
)
rownames(Loadings) <- paste0("feat", 1:30)
loadBarplot(Loadings, nfeat = 10)
# PhiSpace
query <- PhiSpace(
reference = reference, query = query, phenotypes = refName, PhiSpaceAssay = "log1p", regMethod = "PLS"
)
query
reducedDim(query, "PhiSpace")
VizSpatial(query, x_coord = "dsfd", reducedDim = "alveolar macrophage", reducedDim2use = "PhiSpace")
suppressMessages(devtools::install_github("jiadongm/PhiSpace/pkg"))
usethis::use_pkgdown_github_pages()
usethis::gh_token_help()
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
library(usethis)
library(pkgdown)
build_site()
usethis::use_pkgdown_github_pages()
use_logo()
?use_logo
getwd()
use_logo("man/figures/logo.png")
build_site()
build_site()
use_pkgdown_github_pages()
build_site()
?CVXR::psolve
>CVXR::solve()
>CVXR::solve
?CVXR::solve
