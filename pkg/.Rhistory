YY = YY,
ncomp = ncomp,
Nselect = Nselect,
impScores = impScores,
assayName = NPintsAssay,
regMethod = regMethod)
atlas_re$selectFeat %>% length()
phenoAssay <- t(assay(reference, NPintsAssay))
YrefHat <- phenotype(phenoAssay, atlas_re, assayName = NPintsAssay)$Yhat
YrefHat_norm <- normPhiScores(YrefHat)
NPintsScore_norm <- normCols(NPintsScore)
## Project query
phenoAssay <- t(assay(query, NPintsAssay))
NPintsScore <- phenotype(phenoAssay, atlas_re, assayName = NPintsAssay)$Yhat
NPintsScore_norm <- normCols(NPintsScore)
## Heatmaps
if(T){
if(F){
## LDA probabilities for heatmap
postProbs <- lapply(
1:length(phenotypes),
function(i){
YtrainName <- phenotypes[i]
lda_fit <- MASS::lda(YrefHat_norm, colData(reference)[,YtrainName])
predL <- predict(lda_fit, NPintsScore_norm)
out <- predL$posterior
return(out)
}
)
postProbs <- do.call(cbind, postProbs)
## Using postProbs
plot_dat0 <-
postProbs %>%
as.data.frame()
lvls <- c("DC1", "DC2", "pDC", "HEF", "Day3", "Day6", "Day9_DP", "Day9_SP")
plot_dat <-
plot_dat0 %>%
mutate(label = factor(query$mainTypes, levels = lvls))  %>%
arrange(label) %>%
mutate(id = 1:nrow(plot_dat0))
plot_dat %>%
pivot_longer(! c(label, id), names_to = "typeNames", values_to = "score") %>%
mutate(phenotypeCategory = translateLabel(
text = typeNames, dictionary = diction, dFrom = "labs", dTo = "phenotypeCategory"
)) %>%
mutate(typeNames = factor(typeNames, levels = unique(typeNames))) %>%
ggplot(aes(x = typeNames, y = id, fill = score, scales = "free_y")) +
geom_tile() +
facet_grid(label ~ phenotypeCategory, scales = "free", space = "free", switch = "y") +
scale_fill_viridis_c() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y.left = element_text(angle = 0),
axis.text.x = element_text(angle = 45)
)
}
## Heatmap using scores
lvls <- sapply(1:length(phenotypes),
function(x){
sort(unique(colData(reference)[,phenotypes[x]]))
}) %>%
do.call(c, .)
plot_dat0 <-
NPintsScore_norm[,lvls] %>%
as.data.frame()
lvls <- c("DC1", "DC2", "pDC", "HEF", "Day3", "Day6", "Day9_DP", "Day9_SP")
plot_dat <-
plot_dat0 %>%
mutate(label = factor(query$mainTypes, levels = lvls))  %>%
arrange(label) %>%
mutate(id = 1:nrow(plot_dat0))
plot_dat %>%
pivot_longer(! c(label, id), names_to = "typeNames", values_to = "score") %>%
mutate(phenotypeCategory = translateLabel(
text = typeNames, dictionary = diction, dFrom = "labs", dTo = "phenotypeCategory"
)) %>%
mutate(typeNames = factor(typeNames, levels = unique(typeNames))) %>%
ggplot(aes(x = typeNames, y = id, fill = score, scales = "free_y")) +
geom_tile() +
facet_grid(label ~ phenotypeCategory, scales = "free", space = "free", switch = "y") +
scale_fill_gradientn(colours = MATLAB_cols) +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y.left = element_text(angle = 0),
axis.text.x = element_text(angle = 0),
axis.title = element_blank()
)
}
dim(reference)
dim(query)
library(devtools)
# Attach all defined functions
setwd("~/PhiSpace/pkg")
load_all()
atlas_re <- SuperPC(re = NULL,
reference = reference,
# labelName = YrefName,
YY = YY,
ncomp = ncomp,
nfeat = nfeat,
impScores = impScores,
assayName = PhiSpaceAssay,
regMethod = regMethod)
atlas_re$selectFeat %>% length()
phenoAssay <- t(assay(reference, PhiSpaceAssay))
atlas_re <- SuperPC(re = NULL,
reference = reference,
# labelName = YrefName,
YY = YY,
ncomp = ncomp,
nfeat = nfeat,
impScores = impScores,
assayName = PhiSpaceAssay,
regMethod = regMethod)
rm(list=ls()); gc()
setwd("~/PhiSpaceR")
dat_dir <- "/data/projects/punim0613/JiaDong/PhiSpace/"
source("MATLAB_colScale.R")
source("Case1/Rosa_cols.R")
## Load data
Rosa0 <- readRDS(paste0(dat_dir, "output/Case1/query_Rosa_sub.rds"))
reference0 <- readRDS(paste0(dat_dir,"data/stemformatics/ref_dc.rds"))
### Put following in wrapper
## Define phenotypes
phenotypes <- c("Cell Type", "Sample Source")
YY <- codeY(reference0, phenotypes)
diction <-
data.frame(
labs = colnames(YY),
phenotypeCategory =
rep(phenotypes,
apply(colData(reference0)[,phenotypes], 2, function(x) length(unique(x)))
)
)
## Common genes and rank transform
temp <- KeepCommonGenes(reference0, Rosa0)
reference <- temp[[1]]
query <- temp[[2]]
rm(temp); gc()
reference <- RankTransf(reference, "data", sparse = F)
query <- RankTransf(query, "counts")
## rename function
rename_files("keepCommonGenes", "KeepCommonGenes")
## rename function
rename_files("keepCommonGenes", "KeepCommonGenes")
library(devtools)
load_all()
# Attach all defined functions
setwd("~/PhiSpace/pkg")
load_all()
## rename function
rename_files("keepCommonGenes", "KeepCommonGenes")
use_r("KeepCommonGenes")
load_all()
setwd("~/PhiSpaceR")
dat_dir <- "/data/projects/punim0613/JiaDong/PhiSpace/"
source("MATLAB_colScale.R")
source("Case1/Rosa_cols.R")
## Load data
Rosa0 <- readRDS(paste0(dat_dir, "output/Case1/query_Rosa_sub.rds"))
reference0 <- readRDS(paste0(dat_dir,"data/stemformatics/ref_dc.rds"))
### Put following in wrapper
## Define phenotypes
phenotypes <- c("Cell Type", "Sample Source")
YY <- codeY(reference0, phenotypes)
diction <-
data.frame(
labs = colnames(YY),
phenotypeCategory =
rep(phenotypes,
apply(colData(reference0)[,phenotypes], 2, function(x) length(unique(x)))
)
)
## Common genes and rank transform
temp <- KeepCommonGenes(reference0, Rosa0)
reference <- temp[[1]]
query <- temp[[2]]
rm(temp); gc()
reference <- RankTransf(reference, "data", sparse = F)
query <- RankTransf(query, "counts")
ncomp <- 11
nfeat <- 95
atlas_re <- SuperPC(re = NULL,
reference = reference,
# labelName = YrefName,
YY = YY,
ncomp = ncomp,
nfeat = nfeat,
impScores = impScores,
assayName = PhiSpaceAssay,
regMethod = regMethod)
atlas_re$selectFeat %>% length()
phenoAssay <- t(assay(reference, PhiSpaceAssay))
YrefHat <- phenotype(phenoAssay, atlas_re, assayName = PhiSpaceAssay)$Yhat
atlas_re <- SuperPC(re = NULL,
reference = reference,
# labelName = YrefName,
YY = YY,
ncomp = ncomp,
nfeat = nfeat,
impScores = impScores,
assayName = PhiSpaceAssay,
regMethod = regMethod)
reg_re <- mvr(t(assay(reference, PhiSpaceAssay)), YY, ncomp, method = regMethod)
impScores <- reg_re$coefficients[,,ncomp]
regMethod = "PLS"
PhiSpaceAssay = "rank"
reg_re <- mvr(t(assay(reference, PhiSpaceAssay)), YY, ncomp, method = regMethod)
impScores <- reg_re$coefficients[,,ncomp]
atlas_re <- SuperPC(re = NULL,
reference = reference,
# labelName = YrefName,
YY = YY,
ncomp = ncomp,
nfeat = nfeat,
impScores = impScores,
assayName = PhiSpaceAssay,
regMethod = regMethod)
atlas_re$selectFeat %>% length()
phenoAssay <- t(assay(reference, PhiSpaceAssay))
YrefHat <- phenotype(phenoAssay, atlas_re, assayName = PhiSpaceAssay)$Yhat
YrefHat_norm <- normPhiScores(YrefHat)
## Project query
phenoAssay <- t(assay(query, PhiSpaceAssay))
PhiSpaceScore <- phenotype(phenoAssay, atlas_re, assayName = PhiSpaceAssay)$Yhat
PhiSpaceScore_norm <- normPhiScores(PhiSpaceScore)
## Heatmaps
if(T){
if(F){
## LDA probabilities for heatmap
postProbs <- lapply(
1:length(phenotypes),
function(i){
YtrainName <- phenotypes[i]
lda_fit <- MASS::lda(YrefHat_norm, colData(reference)[,YtrainName])
predL <- predict(lda_fit, NPintsScore_norm)
out <- predL$posterior
return(out)
}
)
postProbs <- do.call(cbind, postProbs)
## Using postProbs
plot_dat0 <-
postProbs %>%
as.data.frame()
lvls <- c("DC1", "DC2", "pDC", "HEF", "Day3", "Day6", "Day9_DP", "Day9_SP")
plot_dat <-
plot_dat0 %>%
mutate(label = factor(query$mainTypes, levels = lvls))  %>%
arrange(label) %>%
mutate(id = 1:nrow(plot_dat0))
plot_dat %>%
pivot_longer(! c(label, id), names_to = "typeNames", values_to = "score") %>%
mutate(phenotypeCategory = translateLabel(
text = typeNames, dictionary = diction, dFrom = "labs", dTo = "phenotypeCategory"
)) %>%
mutate(typeNames = factor(typeNames, levels = unique(typeNames))) %>%
ggplot(aes(x = typeNames, y = id, fill = score, scales = "free_y")) +
geom_tile() +
facet_grid(label ~ phenotypeCategory, scales = "free", space = "free", switch = "y") +
scale_fill_viridis_c() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y.left = element_text(angle = 0),
axis.text.x = element_text(angle = 45)
)
}
## Heatmap using scores
lvls <- sapply(1:length(phenotypes),
function(x){
sort(unique(colData(reference)[,phenotypes[x]]))
}) %>%
do.call(c, .)
plot_dat0 <-
NPintsScore_norm[,lvls] %>%
as.data.frame()
lvls <- c("DC1", "DC2", "pDC", "HEF", "Day3", "Day6", "Day9_DP", "Day9_SP")
plot_dat <-
plot_dat0 %>%
mutate(label = factor(query$mainTypes, levels = lvls))  %>%
arrange(label) %>%
mutate(id = 1:nrow(plot_dat0))
plot_dat %>%
pivot_longer(! c(label, id), names_to = "typeNames", values_to = "score") %>%
mutate(phenotypeCategory = translateLabel(
text = typeNames, dictionary = diction, dFrom = "labs", dTo = "phenotypeCategory"
)) %>%
mutate(typeNames = factor(typeNames, levels = unique(typeNames))) %>%
ggplot(aes(x = typeNames, y = id, fill = score, scales = "free_y")) +
geom_tile() +
facet_grid(label ~ phenotypeCategory, scales = "free", space = "free", switch = "y") +
scale_fill_gradientn(colours = MATLAB_cols) +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y.left = element_text(angle = 0),
axis.text.x = element_text(angle = 0),
axis.title = element_blank()
)
}
## Heatmaps
if(T){
if(F){
## LDA probabilities for heatmap
postProbs <- lapply(
1:length(phenotypes),
function(i){
YtrainName <- phenotypes[i]
lda_fit <- MASS::lda(YrefHat_norm, colData(reference)[,YtrainName])
predL <- predict(lda_fit, PhiSpaceScore_norm)
out <- predL$posterior
return(out)
}
)
postProbs <- do.call(cbind, postProbs)
## Using postProbs
plot_dat0 <-
postProbs %>%
as.data.frame()
lvls <- c("DC1", "DC2", "pDC", "HEF", "Day3", "Day6", "Day9_DP", "Day9_SP")
plot_dat <-
plot_dat0 %>%
mutate(label = factor(query$mainTypes, levels = lvls))  %>%
arrange(label) %>%
mutate(id = 1:nrow(plot_dat0))
plot_dat %>%
pivot_longer(! c(label, id), names_to = "typeNames", values_to = "score") %>%
mutate(phenotypeCategory = translateLabel(
text = typeNames, dictionary = diction, dFrom = "labs", dTo = "phenotypeCategory"
)) %>%
mutate(typeNames = factor(typeNames, levels = unique(typeNames))) %>%
ggplot(aes(x = typeNames, y = id, fill = score, scales = "free_y")) +
geom_tile() +
facet_grid(label ~ phenotypeCategory, scales = "free", space = "free", switch = "y") +
scale_fill_viridis_c() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y.left = element_text(angle = 0),
axis.text.x = element_text(angle = 45)
)
}
## Heatmap using scores
lvls <- sapply(1:length(phenotypes),
function(x){
sort(unique(colData(reference)[,phenotypes[x]]))
}) %>%
do.call(c, .)
plot_dat0 <-
PhiSpaceScore_norm[,lvls] %>%
as.data.frame()
lvls <- c("DC1", "DC2", "pDC", "HEF", "Day3", "Day6", "Day9_DP", "Day9_SP")
plot_dat <-
plot_dat0 %>%
mutate(label = factor(query$mainTypes, levels = lvls))  %>%
arrange(label) %>%
mutate(id = 1:nrow(plot_dat0))
plot_dat %>%
pivot_longer(! c(label, id), names_to = "typeNames", values_to = "score") %>%
mutate(phenotypeCategory = translateLabel(
text = typeNames, dictionary = diction, dFrom = "labs", dTo = "phenotypeCategory"
)) %>%
mutate(typeNames = factor(typeNames, levels = unique(typeNames))) %>%
ggplot(aes(x = typeNames, y = id, fill = score, scales = "free_y")) +
geom_tile() +
facet_grid(label ~ phenotypeCategory, scales = "free", space = "free", switch = "y") +
scale_fill_gradientn(colours = MATLAB_cols) +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y.left = element_text(angle = 0),
axis.text.x = element_text(angle = 0),
axis.title = element_blank()
)
}
use_r("PhiSpace_1ref")
## rename function
rename_files("PhiSpace_1ref", "PhiSpaceR_1ref")
use_r("PhiSpaceR_1ref")
use_r("buildAtlas")
library(devtools)
load_all()
load_all()
# Attach all defined functions
setwd("~/PhiSpace/pkg")
load_all()
setwd("~/PhiSpaceR")
dat_dir <- "/data/projects/punim0613/JiaDong/PhiSpace/"
source("MATLAB_colScale.R")
source("Case1/Rosa_cols.R")
## Load data
query <- readRDS(paste0(dat_dir, "output/Case1/query_Rosa_sub.rds"))
reference <- readRDS(paste0(dat_dir,"data/stemformatics/ref_dc.rds"))
colnames(colData(reference))
phenotypes = c("Cell Type", "Sample Source"
phenotypes = c("Cell Type", "Sample Source")
phenotypes = c("Cell Type", "Sample Source")
refAssay = "data"
queryAssay = "counts"
## Build Y matrix
YY <- codeY(reference, phenotypes)
diction <-
data.frame(
labs = colnames(YY),
phenotypeCategory =
rep(phenotypes,
apply(colData(reference)[,phenotypes], 2, function(x) length(unique(x)))
)
)
## Build Y matrix
YY <- codeY(reference, phenotypes)
phenoCategory <-
data.frame(
labs = colnames(YY),
phenotypeCategory =
rep(phenotypes,
apply(colData(reference)[,phenotypes], 2, function(x) length(unique(x)))
)
)
## Common genes and rank transform
c(reference, query) %<-% keepCommonGenes(reference, query)
## Common genes and rank transform
c(reference, query) %<-% KeepCommonGenes(reference, query)
reference <- RankTransf(reference, refAssay)
query <- RankTransf(query, queryAssay)
ncomp <- ncol(YY)
reg_re <- mvr(t(assay(reference, PhiSpaceAssay)), YY, ncomp, method = regMethod)
regMethod = "PLS"
PhiSpaceAssay = "rank"
reg_re <- mvr(t(assay(reference, PhiSpaceAssay)), YY, ncomp, method = regMethod)
impScores <- reg_re$coefficients[,,ncomp]
reg_re <- mvr(t(assay(reference, PhiSpaceAssay)), YY, ncomp, method = regMethod)
ncomp
t(assay(reference, PhiSpaceAssay))
reg_re <- mvr(t(assay(reference, PhiSpaceAssay)), YY, ncomp, method = regMethod)
dim(assay(reference, PhiSpaceAssay))
reg_re <- mvr(t(assay(reference, PhiSpaceAssay)), YY, ncomp, method = regMethod)
YY
reg_re <- mvr(t(assay(reference, PhiSpaceAssay)), YY, ncomp, method = regMethod)
use_r("mvr")
# Attach all defined functions
setwd("~/PhiSpace/pkg")
load_all()
reg_re <- mvr(t(assay(reference, PhiSpaceAssay)), YY, ncomp, method = regMethod)
?mvr
regMethod
mvr
PhiSpaceAssay
ncomp
reg_re <- mvr(t(assay(reference, PhiSpaceAssay)), YY, ncomp, method = regMethod)
## rename function
rename_files("buildAtlas", "tunePhiSpace")
library(devtools)
library(devtools)
# Attach all defined functions
load_all()
use_r("svdspc.fit.R") # Internal
use_r("pls.fit.R") # Internal
use_r("mvr")
use_r("getPC")
use_r("utils") # Internal, containing several small functions
use_r("normPhiScores")
use_r("rcTransf")
use_r("zeroFeatQC")
use_r("translateLabel")
use_r("KeepCommonGenes")
use_r("phenotype") # Internal
use_r("PhiSpaceR")
use_r("PhiSpaceR_1ref")
use_r("superPC") # Internal
use_r("CVTune_ncomp") # Internal
use_r("CVTune_nfeat") # Internal
use_r("getErr") # Internal
use_r("getErr_nfeat")
# Check and compiel package
# test()
document()
install()
library(devtools)
## Commit
# use_git()
# use_github()
document()
check()
install()
library(devtools)
# Attach all defined functions
load_all()
use_r("PhiSpaceR_1ref")
install()
library(devtools)
# Attach all defined functions
load_all()
use_r("PhiSpaceR_1ref")
library(devtools)
# Attach all defined functions
load_all()
?PhiSpace_1ref
?PhiSpace_1ref
?getClass
PhiSpace::PhiSpaceR_1ref
?PhiSpace::PhiSpace_1ref
use_r("PhiSpaceR_1ref")
?PhiSpaceR_1ref
# Check and compiel package
# test()
document()
check()
git push
